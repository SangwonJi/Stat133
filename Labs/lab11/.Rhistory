knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
> ### Learning Objectives
### General Instructions
- Write your descriptions, explanations, and code in an `Rmd` (R markdown) file.
library(tidyverse)
head(USArrests)
states <- rownames(USArrests)
head(states)
nchar(c("Concepts", "in", "computing", "with", "data"))
# your code
nchar(c("Alabama", "Alaska", "Arizona", "Arkansas", "California"))
# your code
nchar(c("Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado"))
# your code
nchar(c(states))
# your code
tolower(states)
# your code
tolower(c(states)
# your code
tolower(c(states)
# your code
tolower(c(states))
# your code
tolower(states)
# your code
tolower(states)
# your code
nchar(states)
toupper(states)
casefold(states)
# your code
tolower(states)
# number of charcaters
num_chars <- nchar(states)
paste('Pumpkin', 'Pie')
paste('a', 'b', 'c', 'd', 'e')
paste('a', 'b', 'c', 'd', 'e', sep = '-')
paste('a', 1:5, sep = '.')
# paste0() -vs- paste(..., sep = "")
paste0('Pumpkin', 'Pie')
paste('Pumpkin', 'Pie', sep = '')
barplot(char_freqs, las=1, border = NA)
# your code
char_freqs <- table(num_chars)
barplot(char_freqs, las=1, border = NA)
# your code
paste(states[1:5], num_chars[1:5], sep= '=')
# your code
paste(states[1:5], collapse= '')
# extract first 3 characters
substr('Berkeley', start = 1, stop = 3)
# your code
subst(states, start = 1, stop=3)
# your code
substr(states, start = 1, stop=3)
# your code
substr(states, numchars -2, numchars)
# your code
substr(states, num_chars -2, num_chars)
# your code
paste(substr(states, start = 1, stop=3), substr(states, num_chars -2, num_chars))
# your code
paste0(substr(states, start = 1, stop=3), substr(states, num_chars -2, num_chars))
# your code
paste0(substr(states, start = 1, stop=1), substr(states, num_chars -2, num_chars))
# your code
paste(substr(states, start = 1, stop=1), substr(states, num_chars -2, num_chars))
# 4-char states
states[num_chars == 4]
# 10-char states
states[num_chars == 10]
# collapse 4-char states
paste(states[num_chars == 4], collapse = ", ")
# your code
char_freqs
# your code
char_classes <- as.numeric(names(char_freqs))
states_list <- vector("list", length(char_classes))
states_list
for (i in 1:length(char_freqs)) {
collapsed <-paste(states[num_chars == char_classes[i]], collapse =",")
if (char_clases[i] %% 2==0) {
states_list[[i]] <- toupper(collapsed)
} else {
states_list[[i]] <- tolower(collapsed)
}
}
# your code
char_classes <- as.numeric(names(char_freqs))
states_list <- vector("list", length(char_classes))
for (i in 1:length(char_freqs)) {
collapsed <-paste(states[num_chars == char_classes[i]], collapse =",")
if (char_clases[i] %% 2==0) {
states_list[[i]] <- toupper(collapsed)
} else {
states_list[[i]] <- tolower(collapsed)
}
}
if (char_classes[i] %% 2==0) {
states_list[[i]] <- toupper(collapsed)
} else {
states_list[[i]] <- tolower(collapsed)
}
for (i in 1:length(char_freqs)) {
collapsed <-paste(states[num_chars == char_classes[i]], collapse =",")
if (char_classes[i] %% 2==0) {
states_list[[i]] <- toupper(collapsed)
} else {
states_list[[i]] <- tolower(collapsed)
}
}
names(states_list) <-paste(char_classes, "-chars"")
for (i in 1:length(char_freqs)) {
collapsed <-paste(states[num_chars == char_classes[i]], collapse =",")
collapsed <-paste0(states[num_chars == char_classes[i]], collapse =",")
for (i in 1:length(char_freqs)) {
collapsed <-paste0(states[num_chars == char_classes[i]], collapse =",")
if (char_classes[i] %% 2==0) {
states_list[[i]] <- toupper(collapsed)
} else {
states_list[[i]] <- tolower(collapsed)
}
}
names(states_list) <-paste0(char_classes, "-chars"")
for (i in 1:length(char_freqs)) {
collapsed <-paste0(states[num_chars == char_classes[i]], collapse =",")
for (i in 1:length(char_freqs)) {
collapsed <-paste(states[num_chars == char_classes[i]], collapse =",")
if (char_classes[i] %% 2==0) {
states_list[[i]] <- toupper(collapsed)
} else {
states_list[[i]] <- tolower(collapsed)
}
}
names(states_list) <-paste0(char_classes, "-chars"")
for (i in 1:length(char_freqs)) {
collapsed <-paste(states[num_chars == char_classes[i]], collapse =",")
collapsed <-paste(states[num_chars == char_classes[i]], collapse =", ")
for (i in 1:length(char_freqs)) {
collapsed <-paste(states[num_chars == char_classes[i]], collapse =", ")
if (char_classes[i] %% 2==0) {
states_list[[i]] <- toupper(collapsed)
} else {
states_list[[i]] <- tolower(collapsed)
}
}
names(states_list) <-paste0(char_classes, "-chars"")
for (i in 1:length(char_freqs)) {
collapsed <-paste(states[num_chars == char_classes[i]], collapse =", ")
collapsed <-paste0(states[num_chars == char_classes[i]], collapse =", ")
for (i in 1:length(char_freqs)) {
collapsed <-paste0(states[num_chars == char_classes[i]], collapse =", ")
if (char_classes[i] %% 2==0) {
states_list[[i]] <- toupper(collapsed)
} else {
states_list[[i]] <- tolower(collapsed)
}
}
names(states_list) <-paste0(char_classes, "-chars"")
for (i in 1:length(char_freqs)) {
collapsed <-paste0(states[num_chars == char_classes[i]], collapse =", ")
collapsed <-paste(states[num_chars == char_classes[i]], collapse =", ")
for (i in 1:length(char_freqs)) {
collapsed <-paste(states[num_chars == char_classes[i]], collapse =", ")
if (char_classes[i] %% 2==0) {
states_list[[i]] <- toupper(collapsed)
} else {
states_list[[i]] <- tolower(collapsed)
}
}
for (i in 1:length(char_freqs)) {
collapsed <-paste(states[num_chars == char_classes[i]], collapse =", ")
if (char_classes[i] %% 2==0) {
states_list[[i]] <- toupper(collapsed)
} else {
states_list[[i]] <- tolower(collapsed)
}
}
names(states_list) <-paste0(char_classes, "-chars"")
for (i in 1:length(char_freqs)) {
collapsed <-paste(states[num_chars == char_classes[i]], collapse =", ")
# your code
char_classes <- as.numeric(names(char_freqs))
states_list <- vector("list", length(char_classes))
for (i in 1:length(char_freqs)) {
collapsed <-paste(states[num_chars == char_classes[i]], collapse =", ")
if (char_classes[i] %% 2==0) {
states_list[[i]] <- toupper(collapsed)
} else {
states_list[[i]] <- tolower(collapsed)
}
}
names(states_list) <-paste0(char_classes, "-chars")
states_list
names(states_list) <-paste(char_classes, "-chars")
states_list
# your code
paste("file", 1:10, ".csv", sep = "")
# your code
paste0("file", 1:10, ".csv", sep = "")
# your code
paste0("file", 1:10, ".csv")
# your code
paste0("file", 1:10, ".csv", sep = "")
# your code
file <- paste0("file", 1:10, ".csv", sep = "")
dataset <- gsub(parttern="file", replacement="dataset", files)
dataset <- gsub(pattern="file", replacement="dataset", files)
dataset <- gsub(pattern="file", replacement="dataset", file)
dataset
# your code
file <- paste0("file", 1:10, ".csv", sep = "")
dataset <- gsub(pattern="file", replacement="dataset", file)
dataset
to_celsius <- function(x = 1) {
(x - 32) * (5/9)
}
to_kelvin <- function(x = 1) {
(x + 459.67) * (5/9)
}
to_reaumur <- function(x = 1) {
(x - 32) * (4/9)
}
to_rankine <- function(x = 1) {
x + 459.67
}
temp_convert <- function(x = 1, to = "celsius") {
switch(to,
"celsius" = to_celsius(x),
"kelvin" = # fill in the blank,
"reaumur" = # fill in the blank,
`temp_convert()` works fine when the argument `to = 'celsius'`. But what happens
temp_convert <- function(x = 1, to = "celsius") {
switch(to,
"celsius" = to_celsius(x),
"kelvin" = to_kelvin(x),
"reaumur" = to_reaumur(x),
"rankine" = to_rankine(x))
}
temp_convert(30, 'celsius')
temp_convert(30, 'celsius')
temp_convert(30, 'Celsius')
temp_convert(30, 'Celsius')
switch(to,
"celsius" = to_celsius(x),
"kelvin" = to_kelvin(x),
"reaumur" = to_reaumur(x),
"rankine" = to_rankine(x))
# your code
temp_convert <- function(x = 1, to = "celsius") {
switch(to,
"celsius" = to_celsius(x),
"kelvin" = to_kelvin(x),
"reaumur" = to_reaumur(x),
"rankine" = to_rankine(x))
}
# your code
temp_convert <- function(x = 1, to = "celsius") {
switch(to,
"celsius" = to_celsius(x),
"kelvin" = to_kelvin(x),
"reaumur" = to_reaumur(x),
"rankine" = to_rankine(x))
}
temp_convert(30, 'Celsius')
temp_convert(30, 'celsius')
# your code
temp_convert <- function(x = 1, to = "celsius") {
switch(to,
"celsius" = to_celsius(x),
"kelvin" = to_kelvin(x),
"reaumur" = to_reaumur(x),
"rankine" = to_rankine(x))
}
temp_convert(30, 'celsius')
