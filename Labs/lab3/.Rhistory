---
title: "Lab 3: First contact with dplyr and ggplot2"
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
> ### Learning Objectives:
In this lab, you will start learning a couple of approaches to manipulate tables
Likewise, to create graphics in a fairly consistent and visually pleasing way,
While you follow this lab, you may want to open these cheat sheets:
- [dplyr cheatsheet](https://github.com/rstudio/cheatsheets/raw/master/data-transformation.pdf)
- [ggplot2 cheatsheet]https://github.com/rstudio/cheatsheets/raw/master/data-visualization-2.1.pdf)
### 1.1) Installing packages
I'm assuming that you already installed the package `"tidyverse"` which contains
`"dplyr"` and `"ggplot2"`.
If that's not the case then __run on the console__ the command below
Remember that you only need to install a package once! After a package has been
```{r eval=FALSE}
# (include these commands in your Rmd file)
# load the packages
library(tidyverse)
# (include these commands in your Rmd file)
# load the packages
library(tidyverse)
__About loading packages:__ Another rule to keep in mind is to always load any
### 1.2) Data `starwars`
The data file for this lab has to do with Star Wars characters.
```{r read, eval = FALSE}
# assuming you loaded dplyr ...
starwars
# assuming you loaded dplyr ...
starwars
-----
# Part I) Basic `"dplyr"` verbs
To make the learning process of `"dplyr"` gentler, Hadley Wickham proposes
- __filter__: keep rows matching criteria
I've slightly modified Hadley's list of verbs:
- `filter()`, `slice()`, and `select()`: subsetting and selecting rows and columns
-----
## 2) Filtering, slicing, and selecting
`slice()` allows you to select rows by position:
```{r}
# first four rows
four_rows <- slice(starwars, 1:4)
four_rows
# first four rows
four_rows <- slice(starwars, 1:4)
four_rows
`filter()` allows you to select rows by defining a condition (which could be
```{r}
# subset rows given a simple condition
# (height greater than 210 cm)
gt_210 <- filter(starwars, height > 210)
gt_210
# subset rows given a simple condition
# (height greater than 210 cm)
gt_210 <- filter(starwars, height > 210)
gt_210
```{r}
# subset rows given a compound condition
filter(starwars, height > 210 & mass <= 90)
# subset rows given a compound condition
filter(starwars, height > 210 & mass <= 90)
`select()` allows you to select one or more columns by name:
```{r}
# columns by name
name_mass <- select(starwars, name, mass)
name_mass
# columns by name
name_mass <- select(starwars, name, mass)
name_mass
### 2.1) Your turn:
a) use `slice()` to subset the data by selecting the first 5 rows.
```{r}
# your code
five_rows <- slice(starwars, 1:5)
five_rows
# your code
five_rows <- slice(starwars, 1:5)
five_rows
b) use `slice()` to subset the data by selecting rows 3, 6, 9, ..., 30.
```{r}
# your code
three_rows <- slice(starwars, seq(3, 30, 3))
three_rows
# your code
three_rows <- slice(starwars, seq(3, 30, 3))
three_rows
c) use `slice_tail()` to subset the data by selecting the last 5 rows.
```{r}
# your code
last_five <- slice_tail(starwars, n=5)
last_five
# your code
last_five <- slice_tail(starwars, n=5)
last_five
d) use `filter()` to subset those individuals with mass less than 50 kg.
```{r}
# your code
less_fifty <- filter(starwars, mass < 50)
less_fifty
# your code
less_fifty <- filter(starwars, mass < 50)
less_fifty
# your code
sex_none <- filter(starwars, sex=='none')
sex_none
# your code
blond_hair <- filter(starwars, hair_color=='blond')
blond_hair
# your code
filtered <- filter(starwars, homeworld == 'Alderaan')
names_Alderaan <- select(filtered, name, homeworld)
names_Alderaan
# your code
filtered_green <- filter(starwars, skin_color=='green')
names_skingreen <- select(filtered_green, name, skin_color)
names_skingreen
# your code
male = filter(starwars, hair_color %in% c('brown','black'))
selected =  select(male, name, height, mass, sex)
selected_male = filter(selected, sex=='male')
selected_male
# your code
female <- filter(starwars, sex=='female')
name_home_female <- select(female, name, homeworld, sex)
name_home_female
# creating a small data frame step by step
fem <- filter(starwars, sex == 'female')
fem <- select(fem, name, height, mass)
fem <- slice(fem, c(1, 2, 5, 6, 8))
fem
mutate(fem, height / mass)
mutate(fem, ht_wt = height / mass)
fem2 <- mutate(fem, ht_m = height * 0.0254, wt_kg = mass * 0.4536)
fem2
# order rows by height (increasingly)
arrange(fem, height)
# order rows by height (decreasingly)
arrange(fem, desc(height))
# order rows by height, and then mass
arrange(fem, height, mass)
# your code
mutate(fem, product= height/mass)
# your code
fem3= mutate(fem, log_height= log(height), log_mass= log(mass))
fem3
# your code
filtered_heights = filter(starwars, height <150)
arrange(filtered_heights, height)
# your code
top_heights = arrange(starwars, desc(height))
selected_top = select(top_heights, name, homeworld, species)
top_five = slice(selected_top, 1:5)
top_five
# your code
top_mass = arrange(starwars, desc(mass))
selected_mass = select(top_mass, name, homeworld, species)
top_five_mass = slice(selected_top, 1:5)
top_five_mass
# average height (removing missing values)
summarise(starwars, avg_height = mean(height, na.rm = TRUE))
# some stats for height (dplyr)
summarise(
starwars,
min = min(height, na.rm = TRUE),
median = median(height, na.rm = TRUE),
avg = mean(height, na.rm = TRUE),
max = max(height, na.rm = TRUE)
)
# average height, grouped by homeworld
summarise(
group_by(starwars, homeworld),
avg_salary = mean(height, na.rm = TRUE)
)
arrange(
summarise(
group_by(starwars, homeworld),
avg_height = mean(height, na.rm = TRUE),
avg_mass = mean(mass, na.rm = TRUE)),
desc(avg_height)
)
# your code
summarise(starwars, max(height, na.rm=TRUE))
# your code
summarise(starwars,sd(mass, na.rm=TRUE))
# your code
summarise(
group_by(starwars, homeworld),
meidan_mass = median(mass, na.rm=TRUE))
# your code
arrange(
summarise(
group_by(starwars, gender),
average_mass = mean(mass, na.rm=TRUE)
)
)
# your code
summarise(
group_by(filter(starwars, sex=='female'), sex),
average_mean= mean(height,na.rm=TRUE),
average_sd=sd(height,na.rm=TRUE)
)
# scatterplot (option 1)
ggplot(data = starwars) +
geom_point(aes(x = height, y = mass))
# colored scatterplot
ggplot(data = starwars, aes(x = height, y = mass)) +
geom_point(aes(color = sex))
# your code
ggplot(data=fem) +
geom_point(aes(x = height, y = mass))
# your code
ggplot(data=fem, aes(x = height, y = mass)) +
geom_text(aes(label=name))
# your code
ggplot(data = filter(starwars, sex == 'female'), aes(x = height, y=mass)) +
geom_label(aes(label=name))
# your code
ggplot(data = starwars, aes(mass)) +
geom_histogram(binwidth = 100)
# your code
ggplot(data = starwars, aes(height)) +
geom_density(kernel='gaussian')
# your code
ggplot(data=starwars, aes(sex)) +
geom_bar()
ㅍ
filter(data, height > 40 | height == 40)
filter(starwars, height > 40 | height == 40)
filter(starwars, height > 40, height == 40)
filter(starwars, height > 40 | < 30)
filter(starwars, height > 40 & height < 40 & height == 40)
mean(starwars(height))
mean(starwars$height)
mean(select(starwars$height))
mean(select(starwars, height))
mean(filter(starwars, (1 > 3) | (3 > 1))$height)
data %>%
filter(age > 45) %>%
select(name, age, height) %>%
arrange(desc(age))
starwars %>%
filter(age > 45) %>%
select(name, age, height) %>%
arrange(desc(age))
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point()
ggplot(data = mpg, aes(displ, hwy)) +
geom_point()
ggplot(data = mpg, aes(hwy, displ)) +
geom_point()
ggplot(data = audi, aes(x = displ, y = hwy)) +
geom_point() +
geom_text(aes(label = model))
