med_pop = median(population, na.rm = TRUE))
# your code
flags6 %>%
group_by(landmass) %>%
select(landmass, area, population, language) %>%
filter(language==2 & 3) %>%
summarise(
med_area = median(area, na.rm = TRUE),
med_pop = median(population, na.rm = TRUE))
# your code
flags %>%
group_by(landmass) %>%
select(landmass, area, population, language) %>%
filter(language==2 & 3) %>%
summarise(
med_area = median(area, na.rm = TRUE),
med_pop = median(population, na.rm = TRUE))
# your code
flags %>%
filter(sunstars >= 1)  %>%
select(landmass, area, population, language) %>%
summarise(
med_area = median(area, na.rm = TRUE),
med_pop = median(population, na.rm = TRUE))
# your code
flags %>%
filter(sunstars >= 1)  %>%
select(sunstars, mainhue) %>%
summarise(
counts = count(mainhue))
# your code
flags %>%
filter(sunstars >= 1)  %>%
select(sunstars, mainhue) %>%
summarise(
counts = count(red))
# your code
flags %>%
filter(sunstars >= 1)  %>%
select(sunstars, red) %>%
summarise(
counts = count(red))
# your code
flags %>%
filter(sunstars >= 1)  %>%
select(sunstars, mainhue) %>%
summarise(
counts = count(red))
# your code
flags %>%
filter(sunstars >= 1)  %>%
select(sunstars, mainhue) %>%
summarise(
counts = count(mainhue))
# your code
flags %>%
select(name, landmass, population) %>%
slice(1:3)
selected_sliced
# your code
flags %>%
select(name, landmass, area, population) %>%
slice(1:5) %>%
arrange(population)
# your code
flags %>%
select(name, landmass, area, population) %>%
slice(1:5) %>%
arrange(population)
# your code
flags %>%
select(name, religion, circles) %>%
filter(circles >=1)
# your code
flags %>%
select(name, religion, circles) %>%
filter(circles >=1) %>%
str()
# your code
flags_crosses(
flags %>%
select(name,colours,religion) %>%
filter(crosses >= 1))
# your code
flags %>%
select(name,colours,religion) %>%
filter(crosses >= 1)
# your code
flags %>%
select(name,colours,religion) %>%
filter(cross >= 1)
# your code
flags_crosses(
flags %>%
select(name,colours,religion,crosses) %>%
filter(crosses >= 1))
# your code
flags %>%
select(name,colours,religion,crosses) %>%
filter(crosses >= 1)
# your code
flags_crosses
# your code
flags %>%
filter(sunstars >=1) %>%
select(sunstars, mainhue) %>%
# your code
flags %>%
filter(sunstars >=1) %>%
select(sunstars, mainhue) %>%
count(mainhue)
# your code
flags %>%
filter(sunstars >=1) %>%
select(sunstars, mainhue) %>%
count(mainhue)
# your code
flags %>%
filter(sunstars >=1) %>%
select(sunstars, mainhue) %>%
count(mainhue, sort=TRUE)
# your code
flags6 %>%
group_by(landmass) %>%
select(landmass, area, population, language) %>%
filter(language==2 & 3) %>%
summarise(
med_area = median(area, na.rm = TRUE),
med_pop = median(population, na.rm = TRUE))
# your code
names(flags)
# your code
names(flags)
# import with read.table()
flags <- read.table(
file = './flag.data',
sep = ',',
col.names = column_names)
# your code
names(flags)
# your code
names(flags)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
> ### Learning Objectives
### General Instructions
- Write your descriptions, explanations, and code in an `Rmd` (R markdown) file.
-----
## 1) Importing Data Tables
Data sets come in many different presentations. One common format is that of a
Because data tables are so ubiquitous, it is fundamental that you learn how to
We will talk about the following functions (and packages)
- `read.table()`
## 2) Flags Data Set
The first data set to consider is the __Flags Data Set__ that is part of the
<http://archive.ics.uci.edu/ml/datasets/Flags>
The location of the data file `flag.data` is:
<https://archive.ics.uci.edu/ml/machine-learning-databases/flags/flag.data>
The location of the data dictionary file `flag.names` (i.e. description of the
<https://archive.ics.uci.edu/ml/machine-learning-databases/flags/flag.names>
### 2.1) Your Turn
Use a text editor (e.g. the one in Rstudio) to look at both the `flag.data`
a) What's the character delimiter used in `flag.data`?
Character delimiter that is used in flag.data are commas (,)
b) Is there a row for column names in `flag.data`?
There is no row to indicate column in flag.data.
c) According to the information of `flag.names` are there any missing values?
According to flag.names, it is indicated that there are no missing values. It is encoded that missing values are none.
### 2.2) Getting a Local Copy of the Data
There are multiple ways to import the tabular data in `flag.data` into R.
```r
My suggestion when reading datasets from the Web, is to always try to get a
```r
Now that you have a local copy of the dataset, you can import it with
```r
Once you read a data table, you may want to start looking at its contents,
```r
# take a peek of last rows
tail(flags)
```
Likewise, you may also want to examine how R has decided to take care of the
```r
Two things to notice are:
- the way R gives names to the columns (e.g. `"V1"`, `"V2"`, etc)
- the data-type R uses for each column (e.g. `"character"`,
In general, the reading table functions have several mechanisms to make an
### 2.3) Your Turn: Column Names
So far we have been able to read the data file in R. But we are missing a few
a) Use the combine function `c()` to create a character vector `column_names`
+ `name`
BTW: Here's a simple example using `c()` to create a character vector:
`x = c('one', 'two', 'three')`
```{r}
# your code
column_names = c('name', 'landmass', 'zone', 'area', 'population', 'language', 'religion', 'bars', 'stripes', 'colours', 'red', 'green', 'blue', 'gold', 'white', 'black', 'orange', 'mainhue', 'circles', 'crosses', 'saltires', 'quarters', 'sunstars', 'crescent', 'triangle', 'icon', 'animate', 'text', 'topleft', 'botright')
# your code
column_names = c('name', 'landmass', 'zone', 'area', 'population', 'language', 'religion', 'bars', 'stripes', 'colours', 'red', 'green', 'blue', 'gold', 'white', 'black', 'orange', 'mainhue', 'circles', 'crosses', 'saltires', 'quarters', 'sunstars', 'crescent', 'triangle', 'icon', 'animate', 'text', 'topleft', 'botright')
b) Use your vector `column_names` and pass this to the argument `col.names` in
```{r eval = FALSE}
# import with read.table()
flags <- read.table(
file = './flag.data',
sep = ',',
col.names = column_names)
c) Once the data is imported, inspect the columns names of `flags` with either
```{r}
# your code
names(flags)
# your code
names(flags)
### 2.4) Your Turn: Importing a few rows
a) Look at the documentation of the function `read.table()` and find how to
```{r}
# your code
flags_1_5 <- read.table(
file = './flag.data',
sep = ',',
col.names = column_names
,nrow = 5)
b) Look at the documentation of the function `read.table()` and find how to
```{r}
# your code
flags_6_10 <- read.table(
file = './flag.data',
sep = ',',
col.names = column_names,
skip = 5,
nrow = 5,
header = TRUE)
### 2.5) Your Turn: Importing a few columns
a) Look at the documentation of the function `read.table()` and find how to
```{r}
# your code
colclass_col = c('character', 'integer', 'integer', 'integer', 'integer', rep("NULL",25))
flag4 = read.table(file = './flag.data',
sep = ',',
colClasses =colclass_col)
flag4
b) How would you import the first, the third, and the fifth columns of
```{r}
# your code
col_imp = c('character', 'integer', 'integer', rep("NULL",27))
flag135 <- read.table(
file = './flag.data',
sep = ',',
col.names= column_names,
colClasses = col_imp,
)
str(flag135)
str(flag135)
-----
## 3) Columns of Categorical Variables
As you can tell from the contents of `flag.data`, most of the data values are
- `1 = N.America`
Often, we may be interested in having categorical variables with their actual
Here's an example for how to import a subset `flag.data` with just the first
four columns, and then re-encode the values of `landmass` to change them from
their numeric values to text categories.
The next code chunk imports the first four columns:
```{r}
flags4 = read.table(
file = "flag.data",
sep = ",",
col.names = c("name", "landmass", "area", "population", rep("", 26)),
colClasses = c(
"character", # name
"integer",   # landmass
"integer",   # area
"integer",   # population
rep("NULL", 26))  # exclude rest of columns
)
flags4
Now the interesting step. We create an auxiliary vector `landmass_keys` that
contains the actual numeric values, and also the text descriptions which are
used as names. You can basically think of this vector as a set of __key-value__
pairs in which a given _key_ refers to the category, e.g. `N.America`, and the
associated _value_ corresponds to the number in the data file, e.g. `1`
```{r}
# auxiliary numeric vector with
landmass_keys = c(
"N.America" = 1,
"S.America" = 2,
"Europe" = 3,
"Africa" = 4,
"Asia" = 5,
"Oceania" = 6)
landmass_keys
landmass_keys
Now that we have `landmass_keys`, we can use it to find the text-category
of any set of numbers between 1 and 6. Here's a toy example for how to do this.
```{r}
# small test
landmass_keys[c(2, 1, 5, 6, 4, 3)]
flags4['landmass_categories'] = names(landmass_keys[flags4$landmass])
flags4
flags4['landmass_categories'] = names(landmass_keys[flags4$landmass])
flags4
We haven't discussed R vectors yet. But we are essentially working with
```{r}
# we are interested in the names
names(landmass_keys[c(2, 1, 5, 6, 4, 3)])
# we are interested in the names
names(landmass_keys[c(2, 1, 5, 6, 4, 3)])
Instead of using the test-vector `c(2, 1, 5, 6, 4, 3)`, we have to use the
```{r}
head(flags4$landmass)
head(flags4$landmass)
Putting everything together, we use `landmass_keys` to produce a vector
```{r}
landmass_categories = names(landmass_keys[flags4$landmass])
head(landmass_categories)
landmass_categories = names(landmass_keys[flags4$landmass])
head(landmass_categories)
The final step involves replacing the data of column `landmass` with this
```{r}
# replace data in column landmass
# (now landmass have character values, not numeric)
flags4$landmass = landmass_categories
head(flags4)
# replace data in column landmass
# (now landmass have character values, not numeric)
flags4$landmass = landmass_categories
head(flags4)
### 3.1) Your Turn: Language Categories
Import only the first six columns (i.e. `name`, `landmass`, ..., `language`).
```{r}
# your code
flags6 = read.table(
file = "flag.data",
sep = ",",
col.names = c("name", "landmass", "area", "population", "language", "religion", rep("", 24)),
colClasses = c(
"character",
"integer",
"integer",
"integer",
"integer",
"integer",
rep("NULL", 24))
)
language_keys = c(
"English" = 1,
"Spanish" = 2,
"French" = 3,
"German" = 4,
"Slavic" = 5,
"Other Indo-European" = 6,
"Chinese" = 7,
"Aravic" = 8,
"Japanese/Turkish/Finnish/Magyar" = 9,
"Others"= 10)
language_keys[c(2, 1, 5, 6, 4, 3, 10, 9, 7, 8)]
names(language_keys[c(2, 1, 5, 6, 4, 3)])
names(language_keys[c(2, 1, 5, 6, 4, 3)])
head(flags6$language)
language_categories = names(language_keys[flags6$language])
flags6$language = language_categories
head(flags6)
flags6$language = language_categories
-----
## 4) More `"dplyr"`
This part of the lab involves working with the __pipe operator__, denoted as `%>%`
The behavior of `"dplyr"` is functional in the sense that function calls don't
The "ugly" side of this functional behavior is that it doesn't lead to
```{r}
# manipulation step-by-step
dat1 <- group_by(flags4, landmass)
dat2 <- select(dat1, landmass, area, population)
dat3 <- summarise(dat2,
avg_area = mean(area, na.rm = TRUE),
avg_pop = mean(population, na.rm = TRUE))
dat4 <- arrange(dat3, avg_area)
dat4
# manipulation step-by-step
dat1 <- group_by(flags4, landmass)
dat2 <- select(dat1, landmass, area, population)
dat3 <- summarise(dat2,
avg_area = mean(area, na.rm = TRUE),
avg_pop = mean(population, na.rm = TRUE))
dat4 <- arrange(dat3, avg_area)
dat4
Or if you don't want to name the intermediate results, you need to wrap the
```{r}
# inside-out style (hard to read)
arrange(
summarise(
select(
group_by(flags4, landmass),
landmass, area, population
),
avg_area = mean(area, na.rm = TRUE),
avg_pop = mean(population, na.rm = TRUE)
),
avg_area
)
This is difficult to read because the order of the operations is from inside
`x %>% f(y)` turns into `f(x, y)` so you can use it to rewrite multiple
```{r}
# using %>%
flags4 %>%
group_by(landmass) %>%
select(landmass, area, population) %>%
summarise(
avg_area = mean(area, na.rm = TRUE),
avg_pop = mean(population, na.rm = TRUE)) %>%
arrange(avg_area)
### 3.1) Your Turn:
Use `"dplyr"` functions and the _magrittr_ (aka _pipe_) operator `"%>%"` to
a) slice the table `flags` to get the first 3 rows, selecting columns `name`,
```{r}
# your code
flags %>%
select(name, landmass, population) %>%
slice(1:3)
# your code
flags %>%
select(name, landmass, population) %>%
slice(1:3)
b) slice the table `flags` to get the first 5 rows, selecting columns
```{r}
# your code
flags %>%
select(name, landmass, area, population) %>%
slice(1:5) %>%
arrange(population)
c) create a data frame `flags_circles` by filtering the data with flags
```{r}
# your code
flags %>%
select(name, religion, circles) %>%
filter(circles >=1) %>%
str()
# your code
flags %>%
select(name, religion, circles) %>%
filter(circles >=1) %>%
str()
d) create a data frame `flags_crosses` by filtering the data with those
```{r}
# your code
flags_crosses
flags %>%
select(name,colours,religion,crosses) %>%
filter(crosses >= 1)
# your code
flags_crosses
flags %>%
select(name,colours,religion,crosses) %>%
filter(crosses >= 1)
e) Filter those flags that have sunstars, and obtain the count (i.e. the
```{r}
# your code
flags %>%
filter(sunstars >=1) %>%
select(sunstars, mainhue) %>%
count(mainhue, sort=TRUE)
# your code
flags %>%
filter(sunstars >=1) %>%
select(sunstars, mainhue) %>%
count(mainhue, sort=TRUE)
f) Compute the median `area`, and median `population` of those countries
```{r}
# your code
flags6 %>%
group_by(landmass) %>%
select(landmass, area, population, language) %>%
filter(language==2 & 3) %>%
summarise(
med_area = median(area, na.rm = TRUE),
med_pop = median(population, na.rm = TRUE))
```{r}
# your code
flags6 %>%
group_by(landmass) %>%
select(landmass, area, population, language) %>%
filter(language==2 & 3) %>%
summarise(
med_area = median(area, na.rm = TRUE),
med_pop = median(population, na.rm = TRUE))
head(flags6)
# import with read.table()
flags <- read.table(
file = './flag.data',
sep = ',',
col.names = column_names
eval=TRUE)
# import with read.table()
flags <- read.table(
file = './flag.data',
sep = ',',
col.names = column_names,
eval=TRUE)
# import with read.table()
flags <- read.table(
file = './flag.data',
sep = ',',
col.names = column_names,
'eval=TRUE')
```{r eval = TRUE}
```{r eval = TRUE}
# import with read.table()
flags <- read.table(
file = './flag.data',
sep = ',',
col.names = column_names)
head(flags6)
# your code
flags %>%
select(name,colours,religion,crosses) %>%
filter(crosses >= 1)
