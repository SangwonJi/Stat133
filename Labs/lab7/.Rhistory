---
title: "Lab 7: Basic Data Objects"
> ### Learning Objectives
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
### General Instructions
- Write your descriptions, explanations, and code in an `Rmd` (R markdown) file.
## 1) Data: US State Facts and Figures (1970s)
Some weeks ago we looked at a couple of approaches to manipulate tables and create
In this lab, you are going to work with the data set `state` that has to with
```{r}
# vectors
name = state.name
area = state.area
region = state.region
population = state.x77[ ,"Population"]
income = state.x77[ ,"Income"]
illiteracy = state.x77[ ,"Illiteracy"]
# vectors
name = state.name
area = state.area
region = state.region
population = state.x77[ ,"Population"]
income = state.x77[ ,"Income"]
illiteracy = state.x77[ ,"Illiteracy"]
### 1.1) Your turn: data-types
Use the function `typeof()` to see the data type of each of the above vectors.
```{r}
# your code
typeof()
# your code
typeof(name)
# your code
typeof(name, area, region, population, income, illiteracy)
four <- head(name, n = 4)
four <- head(name, n = 4)
Single brackets `[ ]` are used to subset (i.e. subscript, split, slice) vectors.
```{r}
four[1]
four[1]
### 2.1) Your turn: subsetting vectors
Without running the code, try to guess the output of the following commands, and
a) number 2: `four[2]`
# your code
four[2]
# your code
four[0]
# your code
four[-1]
# your code
four[-c(1,2,3)]
# your code
four[5]
# your code
four[c(1,2,2,3,3,3)]
# your code
typeof(name)
?seq
# your code
seq(from = 1, to = length = (name), by = 2)
# your code
seq(1, length = (name), 2)
# your code
seq(1, length(name), 2)
# your code
even_states <- seq(1, length(name), 2)
even_states
# your code
area_odd <- area[seq(2, length(name), 2)]
area_odd
# your code
multiples_5 <- income[seq(5, length(name), 5)]
multiples_5
# your code
postions_10 <- population[seq(10, length(name), 10)]
# your code
positions_10 <- population[seq(10, length(name), 10)]
positions_10
?rev()
# your code
reverse_even <- name(sort(name, decreasing = TRUE))
# your code
reverse_even <- (sort(name, decreasing = TRUE))
# your code
rev(sort(name))
# your code
reversed_name <- rev(sort(name))
reversed_odd <- name[seq(2, length(reversed_name), 2)]
reversed_odd
# your code
name[region == "West"]
# your code
states_west <- name[region == "West"]
states_west
# your code
states_west_or_northeast <- name[region=="West" & "Northeast"]
# your code
states_west_or_northeast <- name[region=="West" or "Northeast"]
# your code
states_west_or_northeast <- name[region=="West" or "Northeast"]
# your code
states_west_or_northeast <- name[region=="West" ||  "Northeast"]
# your code
states_west_or_northeast <- name[region=="West" || "Northeast"]
# your code
states_west_or_northeast <- name[region=="West"|| "Northeast"]
# your code
states_west_or_northeast <- name[region=="West"||"Northeast"]
# your code
states_west_or_northeast <- name[region=="West"|"Northeast"]
# your code
states_west_or_northeast <- name[region == "West"||"Northeast"]
# your code
states_west_or_northeast <- name[region == "West"|| region == "Northeast"]
states_west_or_northeast
# your code
states_west_or_northeast <- name[region == "West"| region == "Northeast"]
states_west_or_northeast
# your code
states_south <- name[region == "South"]
sum(states_south)
states_south[1:10]
sum(states_south[1:10])
count(states_south)
counts(states_south)
count(states_south)
sum(states_south)
str(states_south)
sum(str(states_south))
# your code
states_south <- name[region == "South"]
states_south
count(states_south)
?count
?count
??count
sum(states_south)
value(states_south)
sum(states_south)
number(states_south)
count(name[region == "South"])
# your code
states_south <- name[region == "South"]
# your code
which.max(name)
# your code
name.max(area)
# your code
which.maxname(area)
# your code
which.max(name(area))
# your code
name[which.max(area)]
# your code
largest_area <- name[which.max(area)]
largest_area
# your code
largest_population <- name[which.max(population)]
largest_population
# your code
typeof(illitercay)
# your code
typeof(illiteracy)
# your code
name[which.max(illitercy< 60%)]
# your code
name[(illitercy< 60%)]
# your code
name[(illitercy< 60%) & (population >=2000)]
# your code
name[illitercy< 60% & population >=2000]
# your code
name(illitercy< 60% & population >=2000)
# your code
name(illitercy >= 60 & population >=2000)
# your code
name[illitercy >= 60 & population >=2000]
# your code
name[illiteracy >= 60 & population >=2000]
# your code
name[illiteracy >= 60% & population >=2000]
# your code
name[illiteracy >= 60 & population >=2000]
# your code
typeof(illiteracy)
# your code
name[illiteracy]
# your code
typeof(illiteracy)
# your code
name
# your code
show(name)
# your code
name[illiteracy >= 60% & population >=2000]
# your code
name[illiteracy >= (60%)& population >=2000]
# your code
states_northeast <- name[region =="Northeast"]
# your code
name(illiteracy)
# your code
name[illiteracy]
illiteracy
?state.x77
# your code
name[illiteracy >= 0.6 & population >=2000]
income(states_northeast) = median(income(states_northesast))
income[states_northeast] = median(income[states_northesast])
income[states_northeast] = states_northeast[income(median)]
north == states_northeast[income(median)]
north = states_northeast[income(median)]
north = states_northeast[median(income)]
north
# your code
states_northeast <- [region =="Northeast"]
# your code
states_northeast <- region =="Northeast"
north = states_northeast[median(income)]
north
# your code
states_south <- region == "South"
sum(states_south)
sum_states
sum_states <- sum(states_south)
sum_states
# your code
name[illiteracy >=0.6 & population >=2000]
median()
?median
north = median(income, na.rm = FALSE)
north
north = median(states_northeast(income), na.rm = FALSE)
# your code
states_northeast <- region =="Northeast"
north = median(states_northeast(income), na.rm = FALSE)
north = median(states_northeast[income], na.rm = FALSE)
north
states_northeast[income]
# your code
states_northeast <- region =="Northeast"
states_northeast
# your code
states_northeast <- name[region =="Northeast"]
states_northeast
# your code
states_northeast <- income[region =="Northeast"]
states_northeast
median <- median(states_northeast_income, na.rm = FALSE)
median <- median(states_northeast_income, na.rm = FALSE)
median <- median[states_northeast_income, na.rm = FALSE]
# your code
states_northeast_income <- income[region =="Northeast"]
median <- median(states_northeast_income, na.rm = FALSE)
median
# your code
states_northeast <- name[region == "Northeast"]
name[median(states_northeast) == median]
name[median(income[states_northeast]) == median]
name[median(income[states_northeast]) == median]
name[median([income]states_northeast) == median]
name[median([income]states_northeast) == median])
name[median((income)states_northeast) == median]
name[median[income]states_northeast) == median]
name[median[income]states_northeast == median]
states_northeast
income[states_northeast]
income[states_northeast] == median
name[income[states_northeast] == median]
name[income == median & region == 'Northeast']
states_northeast
income
income[states_northeast]
name[income[states_northeast] == median]
income[states_northeast]
income[states_northeast] == median
states_northeast_income[states_northeast_income == median]
# your code
states_northeast <- name[region == "Northeast"]
states_northeast_income <- income[region =="Northeast"]
median <- median(states_northeast_income)
states_northeast_income[states_northeast_income == median]
II <- matrix(c(income[1:5], illiteracy[1:5]), nrow = 5, ncol = 2)
II
rownames(II) <- name[1:5]
colnames(II) <- c("income", "illiteracy")
II
?cbind
# your code
AP <- cbind(area, population)
AP[1:10]
?matrix
# your code
west <- matrix(income, illiteracy)
# your code
cbind(name, are, region)
# your code
cbind(name, area, region)
# your code
NAR <- cbind(name, area, region)
typeof(NAR)
# your code
cbind(income, illiteracy)
# your code
combined <- cbind(income, illiteracy)
west <- matrix(states_west, combined)
west
# your code
typeof(illiteracy)
